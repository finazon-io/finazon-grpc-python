# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from finazon_grpc_python import tickers_pb2 as finazon__grpc__python_dot_tickers__pb2


class TickersServiceStub(object):
    """*
    TickersService provide access to tickers
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindTickersStocks = channel.unary_unary(
                '/finazon.TickersService/FindTickersStocks',
                request_serializer=finazon__grpc__python_dot_tickers__pb2.FindTickersStocksRequest.SerializeToString,
                response_deserializer=finazon__grpc__python_dot_tickers__pb2.FindTickersStocksResponse.FromString,
                )
        self.FindTickersCrypto = channel.unary_unary(
                '/finazon.TickersService/FindTickersCrypto',
                request_serializer=finazon__grpc__python_dot_tickers__pb2.FindTickersCryptoRequest.SerializeToString,
                response_deserializer=finazon__grpc__python_dot_tickers__pb2.FindTickersCryptoResponse.FromString,
                )
        self.FindTickersForex = channel.unary_unary(
                '/finazon.TickersService/FindTickersForex',
                request_serializer=finazon__grpc__python_dot_tickers__pb2.FindTickersForexRequest.SerializeToString,
                response_deserializer=finazon__grpc__python_dot_tickers__pb2.FindTickersForexResponse.FromString,
                )
        self.FindTickersUS = channel.unary_unary(
                '/finazon.TickersService/FindTickersUS',
                request_serializer=finazon__grpc__python_dot_tickers__pb2.FindTickersUSRequest.SerializeToString,
                response_deserializer=finazon__grpc__python_dot_tickers__pb2.FindTickersUSResponse.FromString,
                )


class TickersServiceServicer(object):
    """*
    TickersService provide access to tickers
    """

    def FindTickersStocks(self, request, context):
        """This API call returns an array of stocks tickers available at Finazon Data API. This list is updated daily.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindTickersCrypto(self, request, context):
        """This API call returns an array of crypto tickers available at Finazon Data API. This list is updated daily.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindTickersForex(self, request, context):
        """This API call returns an array of forex tickers available at Finazon Data API. This list is updated daily.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindTickersUS(self, request, context):
        """This API call returns an array of US tickers available at Finazon Data API. This list is updated daily.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TickersServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindTickersStocks': grpc.unary_unary_rpc_method_handler(
                    servicer.FindTickersStocks,
                    request_deserializer=finazon__grpc__python_dot_tickers__pb2.FindTickersStocksRequest.FromString,
                    response_serializer=finazon__grpc__python_dot_tickers__pb2.FindTickersStocksResponse.SerializeToString,
            ),
            'FindTickersCrypto': grpc.unary_unary_rpc_method_handler(
                    servicer.FindTickersCrypto,
                    request_deserializer=finazon__grpc__python_dot_tickers__pb2.FindTickersCryptoRequest.FromString,
                    response_serializer=finazon__grpc__python_dot_tickers__pb2.FindTickersCryptoResponse.SerializeToString,
            ),
            'FindTickersForex': grpc.unary_unary_rpc_method_handler(
                    servicer.FindTickersForex,
                    request_deserializer=finazon__grpc__python_dot_tickers__pb2.FindTickersForexRequest.FromString,
                    response_serializer=finazon__grpc__python_dot_tickers__pb2.FindTickersForexResponse.SerializeToString,
            ),
            'FindTickersUS': grpc.unary_unary_rpc_method_handler(
                    servicer.FindTickersUS,
                    request_deserializer=finazon__grpc__python_dot_tickers__pb2.FindTickersUSRequest.FromString,
                    response_serializer=finazon__grpc__python_dot_tickers__pb2.FindTickersUSResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'finazon.TickersService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TickersService(object):
    """*
    TickersService provide access to tickers
    """

    @staticmethod
    def FindTickersStocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/finazon.TickersService/FindTickersStocks',
            finazon__grpc__python_dot_tickers__pb2.FindTickersStocksRequest.SerializeToString,
            finazon__grpc__python_dot_tickers__pb2.FindTickersStocksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindTickersCrypto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/finazon.TickersService/FindTickersCrypto',
            finazon__grpc__python_dot_tickers__pb2.FindTickersCryptoRequest.SerializeToString,
            finazon__grpc__python_dot_tickers__pb2.FindTickersCryptoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindTickersForex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/finazon.TickersService/FindTickersForex',
            finazon__grpc__python_dot_tickers__pb2.FindTickersForexRequest.SerializeToString,
            finazon__grpc__python_dot_tickers__pb2.FindTickersForexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindTickersUS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/finazon.TickersService/FindTickersUS',
            finazon__grpc__python_dot_tickers__pb2.FindTickersUSRequest.SerializeToString,
            finazon__grpc__python_dot_tickers__pb2.FindTickersUSResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
