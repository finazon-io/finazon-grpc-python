# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from finazon_grpc_python import sip_pb2 as finazon__grpc__python_dot_sip__pb2


class SipServiceStub(object):
    """*
    SipService provide access to Finazon SIP
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTrades = channel.unary_unary(
                '/finazon.SipService/GetTrades',
                request_serializer=finazon__grpc__python_dot_sip__pb2.GetSipTradesRequest.SerializeToString,
                response_deserializer=finazon__grpc__python_dot_sip__pb2.GetSipTradesResponse.FromString,
                )
        self.GetMarketCenter = channel.unary_unary(
                '/finazon.SipService/GetMarketCenter',
                request_serializer=finazon__grpc__python_dot_sip__pb2.GetSipMarketCenterRequest.SerializeToString,
                response_deserializer=finazon__grpc__python_dot_sip__pb2.GetSipMarketCenterResponse.FromString,
                )


class SipServiceServicer(object):
    """*
    SipService provide access to Finazon SIP
    """

    def GetTrades(self, request, context):
        """Returns detailed information on trades executed through the Securities Information Processor (SIP)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMarketCenter(self, request, context):
        """Returns a list of market centers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SipServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrades,
                    request_deserializer=finazon__grpc__python_dot_sip__pb2.GetSipTradesRequest.FromString,
                    response_serializer=finazon__grpc__python_dot_sip__pb2.GetSipTradesResponse.SerializeToString,
            ),
            'GetMarketCenter': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarketCenter,
                    request_deserializer=finazon__grpc__python_dot_sip__pb2.GetSipMarketCenterRequest.FromString,
                    response_serializer=finazon__grpc__python_dot_sip__pb2.GetSipMarketCenterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'finazon.SipService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SipService(object):
    """*
    SipService provide access to Finazon SIP
    """

    @staticmethod
    def GetTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/finazon.SipService/GetTrades',
            finazon__grpc__python_dot_sip__pb2.GetSipTradesRequest.SerializeToString,
            finazon__grpc__python_dot_sip__pb2.GetSipTradesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMarketCenter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/finazon.SipService/GetMarketCenter',
            finazon__grpc__python_dot_sip__pb2.GetSipMarketCenterRequest.SerializeToString,
            finazon__grpc__python_dot_sip__pb2.GetSipMarketCenterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
